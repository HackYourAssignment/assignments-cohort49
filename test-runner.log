2024-07-14 01:46:24 info: ----------------------------------------
2024-07-14 01:46:24 info: >>> Running Unit Test `ex2-dogYears` <<<
2024-07-14 01:46:24 info: ----------------------------------------
2024-07-14 01:46:25 error: *** Unit Test Error Report ***

✕ calculateDogAge should give 7 dog years for 1 human year
  Expected: Your doggie is 7 years old in dog years!
  Received: Your doggie is 7 years old in dog years
✕ calculateDogAge should give 14 dog years for 2 human years
  Expected: Your doggie is 14 years old in dog years!
  Received: Your doggie is 14 years old in dog years
✕ calculateDogAge give 21 dog years for 3 human years
  Expected: Your doggie is 21 years old in dog years!
  Received: Your doggie is 21 years old in dog years


Command failed: npx jest ex2-dogYears.test.js --colors --reporters="/Users/hackyourfuture/Desktop/assignments-cohort49/test-runner/CustomReporter.js"
[Browserslist] Could not parse /Users/hackyourfuture/Desktop/package.json. Ignoring it.
2024-07-14 01:47:10 info: ----------------------------------------------
2024-07-14 01:47:10 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-07-14 01:47:10 info: ----------------------------------------------
2024-07-14 01:47:12 info: All unit tests passed.
2024-07-14 01:47:14 error: *** Spell Checker Report ***

/Users/hackyourfuture/Desktop/assignments-cohort49/1-JavaScript/Week2/assignment/ex1-giveCompliment.js:44:19 - Unknown word (Dorelys)

2024-07-14 01:47:24 info: -------------------------------------------
2024-07-14 01:47:24 info: >>> Running Unit Test `ex3-tellFortune` <<<
2024-07-14 01:47:24 info: -------------------------------------------
2024-07-14 01:47:25 error: *** Unit Test Error Report ***

✕ tellFortune `locations` should be an array initialized with 5 elements
✕ tellFortune `jobTitles` should be an array initialized with 5 elements


Command failed: npx jest ex3-tellFortune.test.js --colors --reporters="/Users/hackyourfuture/Desktop/assignments-cohort49/test-runner/CustomReporter.js"
[Browserslist] Could not parse /Users/hackyourfuture/Desktop/package.json. Ignoring it.
2024-07-14 01:47:27 error: *** Spell Checker Report ***

/Users/hackyourfuture/Desktop/assignments-cohort49/1-JavaScript/Week2/assignment/ex3-tellFortune.js:57:6 - Unknown word (Bryana)

2024-07-14 01:50:32 info: -------------------------------------------
2024-07-14 01:50:32 info: >>> Running Unit Test `ex3-tellFortune` <<<
2024-07-14 01:50:32 info: -------------------------------------------
2024-07-14 01:50:33 info: All unit tests passed.
2024-07-14 01:50:36 error: *** Spell Checker Report ***

/Users/hackyourfuture/Desktop/assignments-cohort49/1-JavaScript/Week2/assignment/ex3-tellFortune.js:57:6 - Unknown word (Bryana)

2024-07-14 01:50:45 info: ----------------------------------------
2024-07-14 01:50:45 info: >>> Running Unit Test `ex2-dogYears` <<<
2024-07-14 01:50:45 info: ----------------------------------------
2024-07-14 01:50:46 error: *** Unit Test Error Report ***

✕ calculateDogAge should give 7 dog years for 1 human year
  Expected: Your doggie is 7 years old in dog years!
  Received: Your doggie is 7 years old in dog years
✕ calculateDogAge should give 14 dog years for 2 human years
  Expected: Your doggie is 14 years old in dog years!
  Received: Your doggie is 14 years old in dog years
✕ calculateDogAge give 21 dog years for 3 human years
  Expected: Your doggie is 21 years old in dog years!
  Received: Your doggie is 21 years old in dog years


Command failed: npx jest ex2-dogYears.test.js --colors --reporters="/Users/hackyourfuture/Desktop/assignments-cohort49/test-runner/CustomReporter.js"
[Browserslist] Could not parse /Users/hackyourfuture/Desktop/package.json. Ignoring it.
2024-07-14 01:51:45 info: --------------------------------------------
2024-07-14 01:51:45 info: >>> Running Unit Test `ex4-shoppingCart` <<<
2024-07-14 01:51:45 info: --------------------------------------------
2024-07-14 01:51:45 warn: A unit test file was not provided.
2024-07-14 01:51:47 info: All steps were completed successfully
2024-07-14 01:51:56 info: ------------------------------------------------
2024-07-14 01:51:56 info: >>> Running Unit Test `ex5-shoppingCartPure` <<<
2024-07-14 01:51:56 info: ------------------------------------------------
2024-07-14 01:51:56 warn: A unit test file was not provided.
2024-07-14 01:51:58 info: All steps were completed successfully
2024-07-14 01:52:13 info: -----------------------------------------
2024-07-14 01:52:13 info: >>> Running Unit Test `ex6-totalCost` <<<
2024-07-14 01:52:13 info: -----------------------------------------
2024-07-14 01:52:13 warn: A unit test file was not provided.
2024-07-14 01:52:15 info: All steps were completed successfully
2024-07-14 01:52:25 info: -------------------------------------------
2024-07-14 01:52:25 info: >>> Running Unit Test `ex7-mindPrivacy` <<<
2024-07-14 01:52:25 info: -------------------------------------------
2024-07-14 01:52:25 warn: A unit test file was not provided.
2024-07-14 01:52:28 info: All steps were completed successfully
2024-07-14 01:52:35 info: ----------------------------------------------
2024-07-14 01:52:35 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-07-14 01:52:35 info: ----------------------------------------------
2024-07-14 01:52:37 info: All unit tests passed.
2024-07-14 01:52:39 error: *** Spell Checker Report ***

/Users/hackyourfuture/Desktop/assignments-cohort49/1-JavaScript/Week2/assignment/ex1-giveCompliment.js:44:19 - Unknown word (Dorelys)

2024-07-14 01:53:31 info: ----------------------------------------
2024-07-14 01:53:31 info: >>> Running Unit Test `ex2-dogYears` <<<
2024-07-14 01:53:31 info: ----------------------------------------
2024-07-14 01:53:33 error: *** Unit Test Error Report ***

✕ calculateDogAge should give 7 dog years for 1 human year
  Expected: Your doggie is 7 years old in dog years!
  Received: Your doggie is 7 years old in dog years
✕ calculateDogAge should give 14 dog years for 2 human years
  Expected: Your doggie is 14 years old in dog years!
  Received: Your doggie is 14 years old in dog years
✕ calculateDogAge give 21 dog years for 3 human years
  Expected: Your doggie is 21 years old in dog years!
  Received: Your doggie is 21 years old in dog years


Command failed: npx jest ex2-dogYears.test.js --colors --reporters="/Users/hackyourfuture/Desktop/assignments-cohort49/test-runner/CustomReporter.js"
[Browserslist] Could not parse /Users/hackyourfuture/Desktop/package.json. Ignoring it.
2024-07-14 01:55:11 info: ----------------------------------------
2024-07-14 01:55:11 info: >>> Running Unit Test `ex2-dogYears` <<<
2024-07-14 01:55:11 info: ----------------------------------------
2024-07-14 01:55:12 info: All unit tests passed.
2024-07-14 01:55:15 info: All steps were completed successfully
2024-07-14 05:30:08 info: -----------------------------------------
2024-07-14 05:30:08 info: >>> Running Unit Test `ex6-totalCost` <<<
2024-07-14 05:30:08 info: -----------------------------------------
2024-07-14 05:30:08 warn: A unit test file was not provided.
2024-07-14 05:30:09 error: *** Spell Checker Report ***


2024-07-14 05:59:37 info: -----------------------------------------
2024-07-14 05:59:37 info: >>> Running Unit Test `ex6-totalCost` <<<
2024-07-14 05:59:37 info: -----------------------------------------
2024-07-14 05:59:37 warn: A unit test file was not provided.
2024-07-14 05:59:39 info: All steps were completed successfully
2024-07-14 06:01:14 info: ----------------------------------------------
2024-07-14 06:01:14 info: >>> Running Unit Test `ex1-giveCompliment` <<<
2024-07-14 06:01:14 info: ----------------------------------------------
2024-07-14 06:01:15 info: All unit tests passed.
2024-07-14 06:01:17 error: *** Spell Checker Report ***

/Users/hackyourfuture/Desktop/assignments-cohort49/1-JavaScript/Week2/assignment/ex1-giveCompliment.js:44:19 - Unknown word (Dorelys)

2024-07-16 06:50:41 info: ------------------------------------------------------
2024-07-16 06:50:41 info: >>> Running Unit Test `ex1-doubleEvenNumbers.test` <<<
2024-07-16 06:50:41 info: ------------------------------------------------------
2024-07-16 06:50:43 info: All unit tests passed.
2024-07-16 06:50:44 error: *** ESLint Report ***

ex1-doubleEvenNumbers.test.js
  20:3  error  Unreachable code  no-unreachable

✖ 1 problem (1 error, 0 warnings)


2024-07-16 06:53:32 info: ------------------------------------------------------
2024-07-16 06:53:32 info: >>> Running Unit Test `ex1-doubleEvenNumbers.test` <<<
2024-07-16 06:53:32 info: ------------------------------------------------------
2024-07-16 06:53:33 info: All unit tests passed.
2024-07-16 06:53:36 info: All steps were completed successfully
2024-07-16 06:58:32 info: ------------------------------------------------------
2024-07-16 06:58:32 info: >>> Running Unit Test `ex1-doubleEvenNumbers.test` <<<
2024-07-16 06:58:32 info: ------------------------------------------------------
2024-07-16 06:58:34 info: All unit tests passed.
2024-07-16 06:58:36 info: All steps were completed successfully
2024-07-16 06:58:55 info: ------------------------------------------------------
2024-07-16 06:58:55 info: >>> Running Unit Test `ex1-doubleEvenNumbers.test` <<<
2024-07-16 06:58:55 info: ------------------------------------------------------
2024-07-16 06:58:56 info: All unit tests passed.
2024-07-16 06:58:59 info: All steps were completed successfully
2024-07-16 07:48:14 info: -------------------------------------------------
2024-07-16 07:48:14 info: >>> Running Unit Test `ex2-mondaysWorth.test` <<<
2024-07-16 07:48:14 info: -------------------------------------------------
2024-07-16 07:48:15 info: All unit tests passed.
2024-07-16 07:48:18 info: All steps were completed successfully
2024-07-17 07:02:14 info: -------------------------------------------------
2024-07-17 07:02:14 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-17 07:02:14 info: -------------------------------------------------
2024-07-17 07:02:16 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (2 ms)
    ✕ should not modify the original `fruitBasket` array (3 ms)
    ✕ should return a new array that does not include the unwanted `lemon` (1 ms)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    If it should pass with deep equality, replace "toBe" with "toStrictEqual"

    Expected: ["apple", "lemon", "grapefruit", "lemon", "banana", "watermelon", "lemon"]
    Received: serializes to the same string

      43 |     const originalFruitBasketContents = [...fruitBasket];
      44 |     
    > 45 |     expect(fruitBasket).toBe(originalFruitBasketContents);
         |                         ^
      46 |   });
      47 |
      48 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.toBe (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:45:25)

  ● sanitizeFruitBasket › should return a new array that does not include the unwanted `lemon`

    expect(received).toBe(expected) // Object.is equality

    Expected: 4
    Received: ["apple", "grapefruit", "banana", "watermelon"]

      48 |   test('should return a new array that does not include the unwanted `lemon`', () => {
      49 |     const sanitizedBasket = sanitizeFruitBasket(fruitBasket, 'lemon');
    > 50 |     expect(sanitizedBasket).toBe(4);
         |                             ^
      51 |   });
      52 | });
      53 |

      at Object.toBe (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:50:29)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 1 passed, 3 total
Snapshots:   0 total
Time:        0.57 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.
2024-07-17 07:04:08 info: ------------------------------------------------------
2024-07-17 07:04:08 info: >>> Running Unit Test `ex1-doubleEvenNumbers.test` <<<
2024-07-17 07:04:08 info: ------------------------------------------------------
2024-07-17 07:04:09 info: All unit tests passed.
2024-07-17 07:04:12 info: All steps were completed successfully
2024-07-17 07:04:25 info: -------------------------------------------------
2024-07-17 07:04:25 info: >>> Running Unit Test `ex2-mondaysWorth.test` <<<
2024-07-17 07:04:25 info: -------------------------------------------------
2024-07-17 07:04:26 info: All unit tests passed.
2024-07-17 07:04:28 info: All steps were completed successfully
2024-07-17 07:04:51 info: -------------------------------------------------
2024-07-17 07:04:51 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-17 07:04:51 info: -------------------------------------------------
2024-07-17 07:04:52 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (3 ms)
    ✕ should not modify the original `fruitBasket` array (4 ms)
    ✕ should return a new array that does not include the unwanted `lemon` (1 ms)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    If it should pass with deep equality, replace "toBe" with "toStrictEqual"

    Expected: ["apple", "lemon", "grapefruit", "lemon", "banana", "watermelon", "lemon"]
    Received: serializes to the same string

      43 |     const originalFruitBasketContents = [...fruitBasket];
      44 |     
    > 45 |     expect(fruitBasket).toBe(originalFruitBasketContents);
         |                         ^
      46 |   });
      47 |
      48 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.toBe (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:45:25)

  ● sanitizeFruitBasket › should return a new array that does not include the unwanted `lemon`

    expect(received).toBe(expected) // Object.is equality

    Expected: 4
    Received: ["apple", "grapefruit", "banana", "watermelon"]

      48 |   test('should return a new array that does not include the unwanted `lemon`', () => {
      49 |     const sanitizedBasket = sanitizeFruitBasket(fruitBasket, 'lemon');
    > 50 |     expect(sanitizedBasket).toBe(4);
         |                             ^
      51 |   });
      52 | });
      53 |

      at Object.toBe (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:50:29)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 1 passed, 3 total
Snapshots:   0 total
Time:        0.252 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.
2024-07-17 07:07:17 info: -------------------------------------------------
2024-07-17 07:07:17 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-17 07:07:17 info: -------------------------------------------------
2024-07-17 07:07:18 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (2 ms)
    ✕ should not modify the original `fruitBasket` array (4 ms)
    ✓ should return a new array that does not include the unwanted `lemon`

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    If it should pass with deep equality, replace "toBe" with "toStrictEqual"

    Expected: ["apple", "lemon", "grapefruit", "lemon", "banana", "watermelon", "lemon"]
    Received: serializes to the same string

      43 |     const originalFruitBasketContents = [...fruitBasket];
      44 |     
    > 45 |     expect(fruitBasket).toBe(originalFruitBasketContents);
         |                         ^
      46 |   });
      47 |
      48 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.toBe (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:45:25)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 2 passed, 3 total
Snapshots:   0 total
Time:        0.373 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.
2024-07-17 07:08:56 info: -------------------------------------------------
2024-07-17 07:08:56 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-17 07:08:56 info: -------------------------------------------------
2024-07-17 07:08:57 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✕ should take two parameters (5 ms)
    ✕ should not modify the original `fruitBasket` array (2 ms)
    ✓ should return a new array that does not include the unwanted `lemon` (1 ms)

  ● sanitizeFruitBasket › should take two parameters

    expect(received).toBe(expected) // Object.is equality

    Expected: ["apple", "lemon", "grapefruit", "lemon", "banana", "watermelon", "lemon"]
    Received: 2

      36 |   test('should take two parameters', () => {
      37 |    
    > 38 |     expect(sanitizeFruitBasket.length).toBe(fruitBasket);
         |                                        ^
      39 |   });
      40 |
      41 |   test('should not modify the original `fruitBasket` array', () => {

      at Object.toBe (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:38:40)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    If it should pass with deep equality, replace "toBe" with "toStrictEqual"

    Expected: ["apple", "lemon", "grapefruit", "lemon", "banana", "watermelon", "lemon"]
    Received: serializes to the same string

      43 |     const originalFruitBasketContents = [...fruitBasket];
      44 |     
    > 45 |     expect(fruitBasket).toBe(originalFruitBasketContents);
         |                         ^
      46 |   });
      47 |
      48 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.toBe (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:45:25)

Test Suites: 1 failed, 1 total
Tests:       2 failed, 1 passed, 3 total
Snapshots:   0 total
Time:        0.379 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.
2024-07-17 07:11:27 info: -------------------------------------------------
2024-07-17 07:11:27 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-17 07:11:27 info: -------------------------------------------------
2024-07-17 07:11:28 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (2 ms)
    ✕ should not modify the original `fruitBasket` array (4 ms)
    ✓ should return a new array that does not include the unwanted `lemon` (1 ms)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    If it should pass with deep equality, replace "toBe" with "toStrictEqual"

    Expected: ["apple", "lemon", "grapefruit", "lemon", "banana", "watermelon", "lemon"]
    Received: serializes to the same string

      43 |     const originalFruitBasketContents = [...fruitBasket];
      44 |     
    > 45 |     expect(fruitBasket).toBe(originalFruitBasketContents);
         |                         ^
      46 |   });
      47 |
      48 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.toBe (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:45:25)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 2 passed, 3 total
Snapshots:   0 total
Time:        0.255 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.
2024-07-17 07:13:32 info: -------------------------------------------------
2024-07-17 07:13:32 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-17 07:13:32 info: -------------------------------------------------
2024-07-17 07:13:34 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (3 ms)
    ✕ should not modify the original `fruitBasket` array (3 ms)
    ✓ should return a new array that does not include the unwanted `lemon` (1 ms)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    Expected: [Function sanitizeFruitBasket]
    Received: ["apple", "lemon", "grapefruit", "lemon", "banana", "watermelon", "lemon"]

      42 |     // Save the original contents of the fruit basket
      43 |     
    > 44 |     expect(fruitBasket).toBe(sanitizeFruitBasket);
         |                         ^
      45 |   });
      46 |
      47 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.toBe (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:44:25)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 2 passed, 3 total
Snapshots:   0 total
Time:        0.383 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.
2024-07-17 07:16:50 info: -------------------------------------------------
2024-07-17 07:16:50 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-17 07:16:50 info: -------------------------------------------------
2024-07-17 07:16:51 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (2 ms)
    ✕ should not modify the original `fruitBasket` array (1 ms)
    ✓ should return a new array that does not include the unwanted `lemon`

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    ReferenceError: sanitizeBasket is not defined

      42 |     // Save the original contents of the fruit basket
      43 |     
    > 44 |     expect(fruitBasket).toBe(sanitizeBasket);
         |                              ^
      45 |   });
      46 |
      47 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.sanitizeBasket (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:44:30)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 2 passed, 3 total
Snapshots:   0 total
Time:        0.368 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.
2024-07-17 07:16:52 error: *** ESLint Report ***

ex3-lemonAllergy.test.js
  44:30  error  'sanitizeBasket' is not defined  no-undef

✖ 1 problem (1 error, 0 warnings)


2024-07-17 07:17:14 info: -------------------------------------------------
2024-07-17 07:17:14 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-17 07:17:14 info: -------------------------------------------------
2024-07-17 07:17:15 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (2 ms)
    ✕ should not modify the original `fruitBasket` array
    ✓ should return a new array that does not include the unwanted `lemon`

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    ReferenceError: sanitizedBasket is not defined

      42 |     // Save the original contents of the fruit basket
      43 |     
    > 44 |     expect(fruitBasket).toBe(sanitizedBasket);
         |                              ^
      45 |   });
      46 |
      47 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.sanitizedBasket (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:44:30)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 2 passed, 3 total
Snapshots:   0 total
Time:        0.37 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.
2024-07-17 07:17:16 error: *** ESLint Report ***

ex3-lemonAllergy.test.js
  44:30  error  'sanitizedBasket' is not defined  no-undef

✖ 1 problem (1 error, 0 warnings)


2024-07-17 07:18:10 info: -------------------------------------------------
2024-07-17 07:18:11 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-17 07:18:11 info: -------------------------------------------------
2024-07-17 07:18:12 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (2 ms)
    ✕ should not modify the original `fruitBasket` array (3 ms)
    ✓ should return a new array that does not include the unwanted `lemon` (1 ms)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toBe(expected) // Object.is equality

    If it should pass with deep equality, replace "toBe" with "toStrictEqual"

    Expected: ["apple", "lemon", "grapefruit", "lemon", "banana", "watermelon", "lemon"]
    Received: serializes to the same string

      42 |     // Save the original contents of the fruit basket
      43 |     
    > 44 |     expect(fruitBasket).toBe(['apple',
         |                         ^
      45 |   'lemon',
      46 |   'grapefruit',
      47 |   'lemon',

      at Object.toBe (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:44:25)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 2 passed, 3 total
Snapshots:   0 total
Time:        0.368 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.
2024-07-17 07:19:18 info: -------------------------------------------------
2024-07-17 07:19:18 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-17 07:19:18 info: -------------------------------------------------
2024-07-17 07:19:19 info: All unit tests passed.
2024-07-17 07:19:21 info: All steps were completed successfully
2024-07-17 07:19:33 info: -------------------------------------------------
2024-07-17 07:19:33 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-17 07:19:33 info: -------------------------------------------------
2024-07-17 07:19:34 info: All unit tests passed.
2024-07-17 07:19:36 info: All steps were completed successfully
2024-07-17 07:35:06 info: ------------------------------------------
2024-07-17 07:35:06 info: >>> Running Unit Test `ex4-observable` <<<
2024-07-17 07:35:06 info: ------------------------------------------
2024-07-17 07:35:08 info: All unit tests passed.
2024-07-17 07:35:10 info: All steps were completed successfully
2024-07-18 10:18:50 info: --------------------------------------
2024-07-18 10:18:50 info: >>> Running Unit Test `ex5-wallet` <<<
2024-07-18 10:18:50 info: --------------------------------------
2024-07-18 10:18:53 error: *** Unit Test Error Report ***

✕ wallet q1: At line 26, which variables are in the scope marked Closure?
✕ wallet q2: What is in the Call Stack, from top to bottom?
✕ wallet q3: What tooltip appears when hovering over the third debug button?
✕ wallet q4: What is displayed in the console?
✕ wallet q5: The owner of the wallet with insufficient funds is?


Command failed: npx jest ex5-wallet.test.js --colors --reporters="/Users/hackyourfuture/Desktop/assignments-cohort49/test-runner/CustomReporter.js"
Debugger attached.
Debugger attached.
Waiting for the debugger to disconnect...
Waiting for the debugger to disconnect...
2024-07-18 10:18:55 error: *** ESLint Report ***

ex5-wallet/index.js
   80:13  error  'b' is not defined  no-undef
   89:13  error  'a' is not defined  no-undef
   98:13  error  'a' is not defined  no-undef
  107:13  error  'a' is not defined  no-undef
  116:13  error  'b' is not defined  no-undef

✖ 5 problems (5 errors, 0 warnings)


2024-07-18 10:21:34 info: --------------------------------------
2024-07-18 10:21:34 info: >>> Running Unit Test `ex5-wallet` <<<
2024-07-18 10:21:34 info: --------------------------------------
2024-07-18 10:21:36 error: *** Unit Test Error Report ***

✕ wallet q1: At line 26, which variables are in the scope marked Closure?
✕ wallet q2: What is in the Call Stack, from top to bottom?
✕ wallet q3: What tooltip appears when hovering over the third debug button?
✕ wallet q4: What is displayed in the console?
✕ wallet q5: The owner of the wallet with insufficient funds is?


Command failed: npx jest ex5-wallet.test.js --colors --reporters="/Users/hackyourfuture/Desktop/assignments-cohort49/test-runner/CustomReporter.js"
Debugger attached.
Debugger attached.
Waiting for the debugger to disconnect...
Waiting for the debugger to disconnect...
2024-07-18 10:21:38 error: *** ESLint Report ***

ex5-wallet/index.js
   80:13  error  'a' is not defined  no-undef
   89:13  error  'c' is not defined  no-undef
   98:13  error  'c' is not defined  no-undef
  107:13  error  'b' is not defined  no-undef
  116:13  error  'c' is not defined  no-undef

✖ 5 problems (5 errors, 0 warnings)


2024-07-18 10:51:45 info: --------------------------------------
2024-07-18 10:51:45 info: >>> Running Unit Test `ex5-wallet` <<<
2024-07-18 10:51:45 info: --------------------------------------
2024-07-18 10:51:46 error: *** Unit Test Error Report ***

✕ wallet q1: At line 26, which variables are in the scope marked Closure?
✕ wallet q2: What is in the Call Stack, from top to bottom?
✕ wallet q3: What tooltip appears when hovering over the third debug button?
✕ wallet q4: What is displayed in the console?
✕ wallet q5: The owner of the wallet with insufficient funds is?


Command failed: npx jest ex5-wallet.test.js --colors --reporters="/Users/hackyourfuture/Desktop/assignments-cohort49/test-runner/CustomReporter.js"
2024-07-18 10:51:47 error: *** ESLint Report ***

ex5-wallet/index.js
   80:13  error  'a' is not defined  no-undef
   90:13  error  'a' is not defined  no-undef
   99:13  error  'a' is not defined  no-undef
  108:13  error  'a' is not defined  no-undef
  117:13  error  'c' is not defined  no-undef

✖ 5 problems (5 errors, 0 warnings)


2024-07-18 10:54:46 info: --------------------------------------
2024-07-18 10:54:46 info: >>> Running Unit Test `ex5-wallet` <<<
2024-07-18 10:54:46 info: --------------------------------------
2024-07-18 10:54:47 error: *** Unit Test Error Report ***

✕ wallet q1: At line 26, which variables are in the scope marked Closure?
✕ wallet q2: What is in the Call Stack, from top to bottom?
✕ wallet q3: What tooltip appears when hovering over the third debug button?
✕ wallet q4: What is displayed in the console?
✕ wallet q5: The owner of the wallet with insufficient funds is?


Command failed: npx jest ex5-wallet.test.js --colors --reporters="/Users/hackyourfuture/Desktop/assignments-cohort49/test-runner/CustomReporter.js"
2024-07-18 10:54:48 error: *** ESLint Report ***

ex5-wallet/index.js
   80:13  error  'a' is not defined  no-undef
   90:13  error  'a' is not defined  no-undef
   99:13  error  'a' is not defined  no-undef
  108:13  error  'a' is not defined  no-undef
  117:13  error  'c' is not defined  no-undef

✖ 5 problems (5 errors, 0 warnings)


2024-07-18 10:55:13 info: --------------------------------------
2024-07-18 10:55:13 info: >>> Running Unit Test `ex5-wallet` <<<
2024-07-18 10:55:13 info: --------------------------------------
2024-07-18 10:55:14 error: *** Unit Test Error Report ***

✕ wallet q1: At line 26, which variables are in the scope marked Closure?
✕ wallet q2: What is in the Call Stack, from top to bottom?


Command failed: npx jest ex5-wallet.test.js --colors --reporters="/Users/hackyourfuture/Desktop/assignments-cohort49/test-runner/CustomReporter.js"
2024-07-18 10:55:54 info: --------------------------------------
2024-07-18 10:55:54 info: >>> Running Unit Test `ex5-wallet` <<<
2024-07-18 10:55:54 info: --------------------------------------
2024-07-18 10:55:55 info: All unit tests passed.
2024-07-18 10:55:58 info: All steps were completed successfully
2024-07-18 10:57:45 info: ------------------------------------------
2024-07-18 10:57:45 info: >>> Running Unit Test `ex4-observable` <<<
2024-07-18 10:57:45 info: ------------------------------------------
2024-07-18 10:57:46 info: All unit tests passed.
2024-07-18 10:57:48 info: All steps were completed successfully
2024-07-18 10:58:07 info: -------------------------------------------------
2024-07-18 10:58:07 info: >>> Running Unit Test `ex2-mondaysWorth.test` <<<
2024-07-18 10:58:07 info: -------------------------------------------------
2024-07-18 10:58:08 info: All unit tests passed.
2024-07-18 10:58:11 info: All steps were completed successfully
2024-07-18 10:58:25 info: -------------------------------------------------
2024-07-18 10:58:25 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-18 10:58:25 info: -------------------------------------------------
2024-07-18 10:58:26 info: All unit tests passed.
2024-07-18 10:58:28 info: All steps were completed successfully
2024-07-18 10:58:41 info: ------------------------------------------------------
2024-07-18 10:58:41 info: >>> Running Unit Test `ex1-doubleEvenNumbers.test` <<<
2024-07-18 10:58:41 info: ------------------------------------------------------
2024-07-18 10:58:42 info: All unit tests passed.
2024-07-18 10:58:44 info: All steps were completed successfully
2024-07-25 12:03:01 info: -------------------------------------------------
2024-07-25 12:03:01 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-25 12:03:01 info: -------------------------------------------------
2024-07-25 12:03:03 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (2 ms)
    ✕ should not modify the original `fruitBasket` array (2 ms)
    ✓ should return a new array that does not include the unwanted `lemon` (1 ms)

  ● sanitizeFruitBasket › should not modify the original `fruitBasket` array

    expect(received).toEqual(expected) // deep equality

    Expected: [Function sanitizeFruitBasket]
    Received: ["apple", "lemon", "grapefruit", "lemon", "banana", "watermelon", "lemon"]

      42 |     // Save the original contents of the fruit basket
      43 |     
    > 44 |     expect(fruitBasket).toEqual(sanitizeFruitBasket);
         |                         ^
      45 |   });
      46 |
      47 |   test('should return a new array that does not include the unwanted `lemon`', () => {

      at Object.toEqual (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:44:25)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 2 passed, 3 total
Snapshots:   0 total
Time:        0.553 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.
2024-07-25 12:13:22 info: -------------------------------------------------
2024-07-25 12:13:22 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-25 12:13:22 info: -------------------------------------------------
2024-07-25 12:13:23 error: *** Unit Test Error Report ***

Command failed: npx jest ex3-lemonAllergy.test.js --colors
 FAIL  1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js
  sanitizeFruitBasket
    ✓ should take two parameters (2 ms)
    ✓ should not modify the original `fruitBasket` array (1 ms)
    ✕ should return a new array that does not include the unwanted `lemon` (4 ms)

  ● sanitizeFruitBasket › should return a new array that does not include the unwanted `lemon`

    expect(received).toEqual(expected) // deep equality

    - Expected  - 3
    + Received  + 0

      Array [
        "apple",
    -   "lemon",
        "grapefruit",
    -   "lemon",
        "banana",
        "watermelon",
    -   "lemon",
      ]

      48 |   test('should return a new array that does not include the unwanted `lemon`', () => {
      49 |     const sanitizedBasket = sanitizeFruitBasket(fruitBasket, 'lemon');
    > 50 |     expect(sanitizedBasket).toEqual(fruitBasket);
         |                             ^
      51 |   });
      52 | });
      53 |

      at Object.toEqual (1-JavaScript/Week3/assignment/ex3-lemonAllergy.test.js:50:29)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 2 passed, 3 total
Snapshots:   0 total
Time:        0.371 s, estimated 1 s
Ran all test suites matching /ex3-lemonAllergy.test.js/i.
2024-07-25 12:14:54 info: -------------------------------------------------
2024-07-25 12:14:54 info: >>> Running Unit Test `ex3-lemonAllergy.test` <<<
2024-07-25 12:14:54 info: -------------------------------------------------
2024-07-25 12:14:55 info: All unit tests passed.
2024-07-25 12:14:57 info: All steps were completed successfully
2024-08-10 12:50:03 info: ------------------------------------------
2024-08-10 12:50:03 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 12:50:03 info: ------------------------------------------
2024-08-10 12:50:06 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✓ should exist and be executable (2 ms)
    ✓ a living cell with zero living neighbors should die and have its life time reset to zero (2 ms)
    ✓ a living cell with one living neighbor should die and have its life time reset to zero
    ✓ a living cell with two living neighbors should survive and have its life time incremented by one
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one (3 ms)
    ✓ a living cell with four living neighbors should die and have its life time reset to zero (1 ms)
    ✓ a dead cell with zero living neighbors should remain dead and have a life time of zero (1 ms)
    ✓ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✓ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✓ a dead cell with three living neighbors should come alive and have its lifeTime reset to one (1 ms)
    ✓ a dead cell with four living neighbors should remain dead and have a life time of zero

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      115 |
      116 |     expect(midCell.alive).toBe(true);
    > 117 |     expect(midCell.lifeTime).toBe(2);
          |                              ^
      118 |   });
      119 |
      120 |   test('a living cell with four living neighbors should die and have its life time reset to zero', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:117:30)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 10 passed, 11 total
Snapshots:   0 total
Time:        0.717 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 12:50:07 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  72:5   error  'opacity' is assigned a value but never used  no-unused-vars
  77:48  error  'opacity' is not defined                      no-undef

✖ 2 problems (2 errors, 0 warnings)


2024-08-10 01:15:41 info: ------------------------------------------
2024-08-10 01:15:41 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 01:15:41 info: ------------------------------------------
2024-08-10 01:15:42 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✓ should exist and be executable (2 ms)
    ✕ a living cell with zero living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a living cell with one living neighbor should die and have its life time reset to zero
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one
    ✕ a living cell with four living neighbors should die and have its life time reset to zero
    ✕ a dead cell with zero living neighbors should remain dead and have a life time of zero (1 ms)
    ✕ a dead cell with one living neighbor should remain dead and have a life time of zero (1 ms)
    ✕ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with three living neighbors should come alive and have its lifeTime reset to one
    ✕ a dead cell with four living neighbors should remain dead and have a life time of zero

  ● Game Of Life: › a living cell with zero living neighbors should die and have its life time reset to zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:48:10)

  ● Game Of Life: › a living cell with one living neighbor should die and have its life time reset to zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:69:10)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:91:10)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:114:10)

  ● Game Of Life: › a living cell with four living neighbors should die and have its life time reset to zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:138:10)

  ● Game Of Life: › a dead cell with zero living neighbors should remain dead and have a life time of zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:158:10)

  ● Game Of Life: › a dead cell with one living neighbor should remain dead and have a life time of zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:179:10)

  ● Game Of Life: › a dead cell with two living neighbors should remain dead and have a life time of zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:201:10)

  ● Game Of Life: › a dead cell with three living neighbors should come alive and have its lifeTime reset to one

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:224:10)

  ● Game Of Life: › a dead cell with four living neighbors should remain dead and have a life time of zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:248:10)

Test Suites: 1 failed, 1 total
Tests:       10 failed, 1 passed, 11 total
Snapshots:   0 total
Time:        0.468 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 01:15:43 error: *** ESLint Report ***

ex6-gameOfLife/index.js
   72:5   error  'opacity' is assigned a value but never used      no-unused-vars
   77:48  error  'opacity' is not defined                          no-undef
   98:12  error  'countLivingNeighbors' is defined but never used  no-unused-vars
  120:11  error  'numAlive' is not defined                         no-undef
  128:18  error  'numAlive' is not defined                         no-undef

✖ 5 problems (5 errors, 0 warnings)


2024-08-10 01:16:10 info: ------------------------------------------
2024-08-10 01:16:10 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 01:16:10 info: ------------------------------------------
2024-08-10 01:16:12 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✓ should exist and be executable (1 ms)
    ✕ a living cell with zero living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a living cell with one living neighbor should die and have its life time reset to zero (1 ms)
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with four living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a dead cell with zero living neighbors should remain dead and have a life time of zero (1 ms)
    ✕ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✕ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with three living neighbors should come alive and have its lifeTime reset to one
    ✕ a dead cell with four living neighbors should remain dead and have a life time of zero

  ● Game Of Life: › a living cell with zero living neighbors should die and have its life time reset to zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:48:10)

  ● Game Of Life: › a living cell with one living neighbor should die and have its life time reset to zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:69:10)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:91:10)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:114:10)

  ● Game Of Life: › a living cell with four living neighbors should die and have its life time reset to zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:138:10)

  ● Game Of Life: › a dead cell with zero living neighbors should remain dead and have a life time of zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:158:10)

  ● Game Of Life: › a dead cell with one living neighbor should remain dead and have a life time of zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:179:10)

  ● Game Of Life: › a dead cell with two living neighbors should remain dead and have a life time of zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:201:10)

  ● Game Of Life: › a dead cell with three living neighbors should come alive and have its lifeTime reset to one

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:224:10)

  ● Game Of Life: › a dead cell with four living neighbors should remain dead and have a life time of zero

    ReferenceError: numAlive is not defined

      118 |
      119 |
    > 120 |       if (numAlive === 2) {
          |       ^
      121 |         // Living cell remains living, dead cell remains dead
      122 |         cell.nextAlive = cell.alive;
      123 |         if(cell.alive) {

      at 2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:120:7
      at callback (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:29)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:46:11)
          at Array.forEach (<anonymous>)
      at forEach (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:45:10)
      at Object.forEachCell [as updateGrid] (2-Browsers/Week1/assignment/ex6-gameOfLife/index.js:116:5)
      at Object.updateGrid (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:248:10)

Test Suites: 1 failed, 1 total
Tests:       10 failed, 1 passed, 11 total
Snapshots:   0 total
Time:        0.307 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 01:16:12 error: *** ESLint Report ***

ex6-gameOfLife/index.js
   72:5   error  'opacity' is assigned a value but never used      no-unused-vars
   77:48  error  'opacity' is not defined                          no-undef
   98:12  error  'countLivingNeighbors' is defined but never used  no-unused-vars
  120:11  error  'numAlive' is not defined                         no-undef
  128:18  error  'numAlive' is not defined                         no-undef

✖ 5 problems (5 errors, 0 warnings)


2024-08-10 01:16:34 info: ------------------------------------------
2024-08-10 01:16:34 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 01:16:34 info: ------------------------------------------
2024-08-10 01:16:36 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✓ should exist and be executable (2 ms)
    ✓ a living cell with zero living neighbors should die and have its life time reset to zero (2 ms)
    ✓ a living cell with one living neighbor should die and have its life time reset to zero (1 ms)
    ✓ a living cell with two living neighbors should survive and have its life time incremented by one
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one (3 ms)
    ✓ a living cell with four living neighbors should die and have its life time reset to zero (1 ms)
    ✓ a dead cell with zero living neighbors should remain dead and have a life time of zero
    ✓ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✓ a dead cell with two living neighbors should remain dead and have a life time of zero (1 ms)
    ✓ a dead cell with three living neighbors should come alive and have its lifeTime reset to one (1 ms)
    ✓ a dead cell with four living neighbors should remain dead and have a life time of zero (1 ms)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      115 |
      116 |     expect(midCell.alive).toBe(true);
    > 117 |     expect(midCell.lifeTime).toBe(2);
          |                              ^
      118 |   });
      119 |
      120 |   test('a living cell with four living neighbors should die and have its life time reset to zero', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:117:30)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 10 passed, 11 total
Snapshots:   0 total
Time:        0.296 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 01:16:37 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  72:5   error  'opacity' is assigned a value but never used  no-unused-vars
  77:48  error  'opacity' is not defined                      no-undef

✖ 2 problems (2 errors, 0 warnings)


2024-08-10 01:22:42 info: ------------------------------------------
2024-08-10 01:22:42 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 01:22:42 info: ------------------------------------------
2024-08-10 01:22:43 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✕ should exist and be executable (3 ms)
    ✕ a living cell with zero living neighbors should die and have its life time reset to zero (2 ms)
    ✕ a living cell with one living neighbor should die and have its life time reset to zero (1 ms)
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one
    ✕ a living cell with four living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a dead cell with zero living neighbors should remain dead and have a life time of zero (1 ms)
    ✕ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✕ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with three living neighbors should come alive and have its lifeTime reset to one (1 ms)
    ✕ a dead cell with four living neighbors should remain dead and have a life time of zero (1 ms)

  ● Game Of Life: › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      29 |
      30 |   test('should exist and be executable', () => {
    > 31 |     expect(exported).toBeDefined();
         |                      ^
      32 |   });
      33 |
      34 |   test('a living cell with zero living neighbors should die and have its life time reset to zero', () => {

      at Object.toBeDefined (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:31:22)

  ● Game Of Life: › a living cell with zero living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      43 |     };
      44 |
    > 45 |     const game = createGame(context, 3, 3);
         |                  ^
      46 |     game.grid.splice(0, 0, ...grid);
      47 |
      48 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:45:18)

  ● Game Of Life: › a living cell with one living neighbor should die and have its life time reset to zero

    TypeError: createGame is not a function

      64 |     };
      65 |
    > 66 |     const game = createGame(context, 3, 3);
         |                  ^
      67 |     game.grid.splice(0, 0, ...grid);
      68 |
      69 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:66:18)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      86 |     };
      87 |
    > 88 |     const game = createGame(context, 3, 3);
         |                  ^
      89 |     game.grid.splice(0, 0, ...grid);
      90 |
      91 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:88:18)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      109 |     };
      110 |
    > 111 |     const game = createGame(context, 3, 3);
          |                  ^
      112 |     game.grid.splice(0, 0, ...grid);
      113 |
      114 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:111:18)

  ● Game Of Life: › a living cell with four living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      133 |     };
      134 |
    > 135 |     const game = createGame(context, 3, 3);
          |                  ^
      136 |     game.grid.splice(0, 0, ...grid);
      137 |
      138 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:135:18)

  ● Game Of Life: › a dead cell with zero living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      153 |     };
      154 |
    > 155 |     const game = createGame(context, 3, 3);
          |                  ^
      156 |     game.grid.splice(0, 0, ...grid);
      157 |
      158 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:155:18)

  ● Game Of Life: › a dead cell with one living neighbor should remain dead and have a life time of zero

    TypeError: createGame is not a function

      174 |     };
      175 |
    > 176 |     const game = createGame(context, 3, 3);
          |                  ^
      177 |     game.grid.splice(0, 0, ...grid);
      178 |
      179 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:176:18)

  ● Game Of Life: › a dead cell with two living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      196 |     };
      197 |
    > 198 |     const game = createGame(context, 3, 3);
          |                  ^
      199 |     game.grid.splice(0, 0, ...grid);
      200 |
      201 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:198:18)

  ● Game Of Life: › a dead cell with three living neighbors should come alive and have its lifeTime reset to one

    TypeError: createGame is not a function

      219 |     };
      220 |
    > 221 |     const game = createGame(context, 3, 3);
          |                  ^
      222 |     game.grid.splice(0, 0, ...grid);
      223 |
      224 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:221:18)

  ● Game Of Life: › a dead cell with four living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      243 |     };
      244 |
    > 245 |     const game = createGame(context, 3, 3);
          |                  ^
      246 |     game.grid.splice(0, 0, ...grid);
      247 |
      248 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:245:18)

Test Suites: 1 failed, 1 total
Tests:       11 failed, 11 total
Snapshots:   0 total
Time:        0.414 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 01:22:44 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  131:9  error  Parsing error: Unexpected token else

✖ 1 problem (1 error, 0 warnings)


2024-08-10 01:23:29 info: ------------------------------------------
2024-08-10 01:23:29 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 01:23:29 info: ------------------------------------------
2024-08-10 01:23:30 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✓ should exist and be executable (2 ms)
    ✓ a living cell with zero living neighbors should die and have its life time reset to zero (2 ms)
    ✓ a living cell with one living neighbor should die and have its life time reset to zero
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one (3 ms)
    ✓ a living cell with three living neighbors should survive and have its life time incremented by one (1 ms)
    ✓ a living cell with four living neighbors should die and have its life time reset to zero
    ✓ a dead cell with zero living neighbors should remain dead and have a life time of zero
    ✓ a dead cell with one living neighbor should remain dead and have a life time of zero (1 ms)
    ✓ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✓ a dead cell with three living neighbors should come alive and have its lifeTime reset to one
    ✓ a dead cell with four living neighbors should remain dead and have a life time of zero (1 ms)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      92 |
      93 |     expect(midCell.alive).toBe(true);
    > 94 |     expect(midCell.lifeTime).toBe(2);
         |                              ^
      95 |   });
      96 |
      97 |   test('a living cell with three living neighbors should survive and have its life time incremented by one', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:94:30)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 10 passed, 11 total
Snapshots:   0 total
Time:        0.458 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 01:23:31 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  72:5   error  'opacity' is assigned a value but never used  no-unused-vars
  77:48  error  'opacity' is not defined                      no-undef

✖ 2 problems (2 errors, 0 warnings)


2024-08-10 01:29:32 info: ------------------------------------------
2024-08-10 01:29:32 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 01:29:32 info: ------------------------------------------
2024-08-10 01:29:33 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✓ should exist and be executable (2 ms)
    ✓ a living cell with zero living neighbors should die and have its life time reset to zero (2 ms)
    ✓ a living cell with one living neighbor should die and have its life time reset to zero (1 ms)
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one (2 ms)
    ✓ a living cell with three living neighbors should survive and have its life time incremented by one (1 ms)
    ✓ a living cell with four living neighbors should die and have its life time reset to zero (1 ms)
    ✓ a dead cell with zero living neighbors should remain dead and have a life time of zero
    ✓ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✓ a dead cell with two living neighbors should remain dead and have a life time of zero (1 ms)
    ✓ a dead cell with three living neighbors should come alive and have its lifeTime reset to one (1 ms)
    ✓ a dead cell with four living neighbors should remain dead and have a life time of zero

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      92 |
      93 |     expect(midCell.alive).toBe(true);
    > 94 |     expect(midCell.lifeTime).toBe(2);
         |                              ^
      95 |   });
      96 |
      97 |   test('a living cell with three living neighbors should survive and have its life time incremented by one', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:94:30)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 10 passed, 11 total
Snapshots:   0 total
Time:        0.29 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 01:29:34 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  72:5   error  'opacity' is assigned a value but never used  no-unused-vars
  77:48  error  'opacity' is not defined                      no-undef

✖ 2 problems (2 errors, 0 warnings)


2024-08-10 01:31:11 info: ------------------------------------------
2024-08-10 01:31:11 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 01:31:11 info: ------------------------------------------
2024-08-10 01:31:12 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✕ should exist and be executable (3 ms)
    ✕ a living cell with zero living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a living cell with one living neighbor should die and have its life time reset to zero
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with four living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a dead cell with zero living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✕ a dead cell with two living neighbors should remain dead and have a life time of zero (1 ms)
    ✕ a dead cell with three living neighbors should come alive and have its lifeTime reset to one (1 ms)
    ✕ a dead cell with four living neighbors should remain dead and have a life time of zero (1 ms)

  ● Game Of Life: › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      29 |
      30 |   test('should exist and be executable', () => {
    > 31 |     expect(exported).toBeDefined();
         |                      ^
      32 |   });
      33 |
      34 |   test('a living cell with zero living neighbors should die and have its life time reset to zero', () => {

      at Object.toBeDefined (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:31:22)

  ● Game Of Life: › a living cell with zero living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      43 |     };
      44 |
    > 45 |     const game = createGame(context, 3, 3);
         |                  ^
      46 |     game.grid.splice(0, 0, ...grid);
      47 |
      48 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:45:18)

  ● Game Of Life: › a living cell with one living neighbor should die and have its life time reset to zero

    TypeError: createGame is not a function

      64 |     };
      65 |
    > 66 |     const game = createGame(context, 3, 3);
         |                  ^
      67 |     game.grid.splice(0, 0, ...grid);
      68 |
      69 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:66:18)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      86 |     };
      87 |
    > 88 |     const game = createGame(context, 3, 3);
         |                  ^
      89 |     game.grid.splice(0, 0, ...grid);
      90 |
      91 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:88:18)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      109 |     };
      110 |
    > 111 |     const game = createGame(context, 3, 3);
          |                  ^
      112 |     game.grid.splice(0, 0, ...grid);
      113 |
      114 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:111:18)

  ● Game Of Life: › a living cell with four living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      133 |     };
      134 |
    > 135 |     const game = createGame(context, 3, 3);
          |                  ^
      136 |     game.grid.splice(0, 0, ...grid);
      137 |
      138 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:135:18)

  ● Game Of Life: › a dead cell with zero living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      153 |     };
      154 |
    > 155 |     const game = createGame(context, 3, 3);
          |                  ^
      156 |     game.grid.splice(0, 0, ...grid);
      157 |
      158 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:155:18)

  ● Game Of Life: › a dead cell with one living neighbor should remain dead and have a life time of zero

    TypeError: createGame is not a function

      174 |     };
      175 |
    > 176 |     const game = createGame(context, 3, 3);
          |                  ^
      177 |     game.grid.splice(0, 0, ...grid);
      178 |
      179 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:176:18)

  ● Game Of Life: › a dead cell with two living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      196 |     };
      197 |
    > 198 |     const game = createGame(context, 3, 3);
          |                  ^
      199 |     game.grid.splice(0, 0, ...grid);
      200 |
      201 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:198:18)

  ● Game Of Life: › a dead cell with three living neighbors should come alive and have its lifeTime reset to one

    TypeError: createGame is not a function

      219 |     };
      220 |
    > 221 |     const game = createGame(context, 3, 3);
          |                  ^
      222 |     game.grid.splice(0, 0, ...grid);
      223 |
      224 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:221:18)

  ● Game Of Life: › a dead cell with four living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      243 |     };
      244 |
    > 245 |     const game = createGame(context, 3, 3);
          |                  ^
      246 |     game.grid.splice(0, 0, ...grid);
      247 |
      248 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:245:18)

Test Suites: 1 failed, 1 total
Tests:       11 failed, 11 total
Snapshots:   0 total
Time:        0.529 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 01:31:13 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  177:1  error  Parsing error: Unexpected token }

✖ 1 problem (1 error, 0 warnings)


2024-08-10 01:31:52 info: ------------------------------------------
2024-08-10 01:31:52 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 01:31:52 info: ------------------------------------------
2024-08-10 01:31:53 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✕ should exist and be executable (3 ms)
    ✕ a living cell with zero living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a living cell with one living neighbor should die and have its life time reset to zero
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with four living neighbors should die and have its life time reset to zero
    ✕ a dead cell with zero living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with one living neighbor should remain dead and have a life time of zero (1 ms)
    ✕ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with three living neighbors should come alive and have its lifeTime reset to one
    ✕ a dead cell with four living neighbors should remain dead and have a life time of zero

  ● Game Of Life: › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      29 |
      30 |   test('should exist and be executable', () => {
    > 31 |     expect(exported).toBeDefined();
         |                      ^
      32 |   });
      33 |
      34 |   test('a living cell with zero living neighbors should die and have its life time reset to zero', () => {

      at Object.toBeDefined (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:31:22)

  ● Game Of Life: › a living cell with zero living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      43 |     };
      44 |
    > 45 |     const game = createGame(context, 3, 3);
         |                  ^
      46 |     game.grid.splice(0, 0, ...grid);
      47 |
      48 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:45:18)

  ● Game Of Life: › a living cell with one living neighbor should die and have its life time reset to zero

    TypeError: createGame is not a function

      64 |     };
      65 |
    > 66 |     const game = createGame(context, 3, 3);
         |                  ^
      67 |     game.grid.splice(0, 0, ...grid);
      68 |
      69 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:66:18)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      86 |     };
      87 |
    > 88 |     const game = createGame(context, 3, 3);
         |                  ^
      89 |     game.grid.splice(0, 0, ...grid);
      90 |
      91 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:88:18)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      109 |     };
      110 |
    > 111 |     const game = createGame(context, 3, 3);
          |                  ^
      112 |     game.grid.splice(0, 0, ...grid);
      113 |
      114 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:111:18)

  ● Game Of Life: › a living cell with four living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      133 |     };
      134 |
    > 135 |     const game = createGame(context, 3, 3);
          |                  ^
      136 |     game.grid.splice(0, 0, ...grid);
      137 |
      138 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:135:18)

  ● Game Of Life: › a dead cell with zero living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      153 |     };
      154 |
    > 155 |     const game = createGame(context, 3, 3);
          |                  ^
      156 |     game.grid.splice(0, 0, ...grid);
      157 |
      158 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:155:18)

  ● Game Of Life: › a dead cell with one living neighbor should remain dead and have a life time of zero

    TypeError: createGame is not a function

      174 |     };
      175 |
    > 176 |     const game = createGame(context, 3, 3);
          |                  ^
      177 |     game.grid.splice(0, 0, ...grid);
      178 |
      179 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:176:18)

  ● Game Of Life: › a dead cell with two living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      196 |     };
      197 |
    > 198 |     const game = createGame(context, 3, 3);
          |                  ^
      199 |     game.grid.splice(0, 0, ...grid);
      200 |
      201 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:198:18)

  ● Game Of Life: › a dead cell with three living neighbors should come alive and have its lifeTime reset to one

    TypeError: createGame is not a function

      219 |     };
      220 |
    > 221 |     const game = createGame(context, 3, 3);
          |                  ^
      222 |     game.grid.splice(0, 0, ...grid);
      223 |
      224 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:221:18)

  ● Game Of Life: › a dead cell with four living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      243 |     };
      244 |
    > 245 |     const game = createGame(context, 3, 3);
          |                  ^
      246 |     game.grid.splice(0, 0, ...grid);
      247 |
      248 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:245:18)

Test Suites: 1 failed, 1 total
Tests:       11 failed, 11 total
Snapshots:   0 total
Time:        0.417 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 01:31:54 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  131:9  error  Parsing error: Unexpected token else

✖ 1 problem (1 error, 0 warnings)


2024-08-10 01:34:31 info: ------------------------------------------
2024-08-10 01:34:31 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 01:34:31 info: ------------------------------------------
2024-08-10 01:34:33 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✕ should exist and be executable (3 ms)
    ✕ a living cell with zero living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a living cell with one living neighbor should die and have its life time reset to zero
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with four living neighbors should die and have its life time reset to zero
    ✕ a dead cell with zero living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with one living neighbor should remain dead and have a life time of zero (1 ms)
    ✕ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with three living neighbors should come alive and have its lifeTime reset to one
    ✕ a dead cell with four living neighbors should remain dead and have a life time of zero

  ● Game Of Life: › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      29 |
      30 |   test('should exist and be executable', () => {
    > 31 |     expect(exported).toBeDefined();
         |                      ^
      32 |   });
      33 |
      34 |   test('a living cell with zero living neighbors should die and have its life time reset to zero', () => {

      at Object.toBeDefined (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:31:22)

  ● Game Of Life: › a living cell with zero living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      43 |     };
      44 |
    > 45 |     const game = createGame(context, 3, 3);
         |                  ^
      46 |     game.grid.splice(0, 0, ...grid);
      47 |
      48 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:45:18)

  ● Game Of Life: › a living cell with one living neighbor should die and have its life time reset to zero

    TypeError: createGame is not a function

      64 |     };
      65 |
    > 66 |     const game = createGame(context, 3, 3);
         |                  ^
      67 |     game.grid.splice(0, 0, ...grid);
      68 |
      69 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:66:18)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      86 |     };
      87 |
    > 88 |     const game = createGame(context, 3, 3);
         |                  ^
      89 |     game.grid.splice(0, 0, ...grid);
      90 |
      91 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:88:18)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      109 |     };
      110 |
    > 111 |     const game = createGame(context, 3, 3);
          |                  ^
      112 |     game.grid.splice(0, 0, ...grid);
      113 |
      114 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:111:18)

  ● Game Of Life: › a living cell with four living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      133 |     };
      134 |
    > 135 |     const game = createGame(context, 3, 3);
          |                  ^
      136 |     game.grid.splice(0, 0, ...grid);
      137 |
      138 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:135:18)

  ● Game Of Life: › a dead cell with zero living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      153 |     };
      154 |
    > 155 |     const game = createGame(context, 3, 3);
          |                  ^
      156 |     game.grid.splice(0, 0, ...grid);
      157 |
      158 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:155:18)

  ● Game Of Life: › a dead cell with one living neighbor should remain dead and have a life time of zero

    TypeError: createGame is not a function

      174 |     };
      175 |
    > 176 |     const game = createGame(context, 3, 3);
          |                  ^
      177 |     game.grid.splice(0, 0, ...grid);
      178 |
      179 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:176:18)

  ● Game Of Life: › a dead cell with two living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      196 |     };
      197 |
    > 198 |     const game = createGame(context, 3, 3);
          |                  ^
      199 |     game.grid.splice(0, 0, ...grid);
      200 |
      201 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:198:18)

  ● Game Of Life: › a dead cell with three living neighbors should come alive and have its lifeTime reset to one

    TypeError: createGame is not a function

      219 |     };
      220 |
    > 221 |     const game = createGame(context, 3, 3);
          |                  ^
      222 |     game.grid.splice(0, 0, ...grid);
      223 |
      224 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:221:18)

  ● Game Of Life: › a dead cell with four living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      243 |     };
      244 |
    > 245 |     const game = createGame(context, 3, 3);
          |                  ^
      246 |     game.grid.splice(0, 0, ...grid);
      247 |
      248 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:245:18)

Test Suites: 1 failed, 1 total
Tests:       11 failed, 11 total
Snapshots:   0 total
Time:        0.417 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 01:34:34 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  130:9  error  Parsing error: Unexpected token else

✖ 1 problem (1 error, 0 warnings)


2024-08-10 01:40:28 info: ------------------------------------------
2024-08-10 01:40:28 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 01:40:28 info: ------------------------------------------
2024-08-10 01:40:29 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✓ should exist and be executable (2 ms)
    ✓ a living cell with zero living neighbors should die and have its life time reset to zero (2 ms)
    ✓ a living cell with one living neighbor should die and have its life time reset to zero (1 ms)
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one (2 ms)
    ✓ a living cell with three living neighbors should survive and have its life time incremented by one
    ✓ a living cell with four living neighbors should die and have its life time reset to zero
    ✓ a dead cell with zero living neighbors should remain dead and have a life time of zero (1 ms)
    ✓ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✓ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✓ a dead cell with three living neighbors should come alive and have its lifeTime reset to one (1 ms)
    ✓ a dead cell with four living neighbors should remain dead and have a life time of zero (1 ms)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      92 |
      93 |     expect(midCell.alive).toBe(true);
    > 94 |     expect(midCell.lifeTime).toBe(2);
         |                              ^
      95 |   });
      96 |
      97 |   test('a living cell with three living neighbors should survive and have its life time incremented by one', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:94:30)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 10 passed, 11 total
Snapshots:   0 total
Time:        0.45 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 08:20:56 info: ------------------------------------------
2024-08-10 08:20:56 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 08:20:56 info: ------------------------------------------
2024-08-10 08:20:58 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✕ should exist and be executable (3 ms)
    ✕ a living cell with zero living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a living cell with one living neighbor should die and have its life time reset to zero
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with four living neighbors should die and have its life time reset to zero
    ✕ a dead cell with zero living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✕ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with three living neighbors should come alive and have its lifeTime reset to one
    ✕ a dead cell with four living neighbors should remain dead and have a life time of zero (1 ms)

  ● Game Of Life: › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      29 |
      30 |   test('should exist and be executable', () => {
    > 31 |     expect(exported).toBeDefined();
         |                      ^
      32 |   });
      33 |
      34 |   test('a living cell with zero living neighbors should die and have its life time reset to zero', () => {

      at Object.toBeDefined (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:31:22)

  ● Game Of Life: › a living cell with zero living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      43 |     };
      44 |
    > 45 |     const game = createGame(context, 3, 3);
         |                  ^
      46 |     game.grid.splice(0, 0, ...grid);
      47 |
      48 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:45:18)

  ● Game Of Life: › a living cell with one living neighbor should die and have its life time reset to zero

    TypeError: createGame is not a function

      64 |     };
      65 |
    > 66 |     const game = createGame(context, 3, 3);
         |                  ^
      67 |     game.grid.splice(0, 0, ...grid);
      68 |
      69 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:66:18)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      86 |     };
      87 |
    > 88 |     const game = createGame(context, 3, 3);
         |                  ^
      89 |     game.grid.splice(0, 0, ...grid);
      90 |
      91 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:88:18)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      109 |     };
      110 |
    > 111 |     const game = createGame(context, 3, 3);
          |                  ^
      112 |     game.grid.splice(0, 0, ...grid);
      113 |
      114 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:111:18)

  ● Game Of Life: › a living cell with four living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      133 |     };
      134 |
    > 135 |     const game = createGame(context, 3, 3);
          |                  ^
      136 |     game.grid.splice(0, 0, ...grid);
      137 |
      138 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:135:18)

  ● Game Of Life: › a dead cell with zero living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      153 |     };
      154 |
    > 155 |     const game = createGame(context, 3, 3);
          |                  ^
      156 |     game.grid.splice(0, 0, ...grid);
      157 |
      158 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:155:18)

  ● Game Of Life: › a dead cell with one living neighbor should remain dead and have a life time of zero

    TypeError: createGame is not a function

      174 |     };
      175 |
    > 176 |     const game = createGame(context, 3, 3);
          |                  ^
      177 |     game.grid.splice(0, 0, ...grid);
      178 |
      179 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:176:18)

  ● Game Of Life: › a dead cell with two living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      196 |     };
      197 |
    > 198 |     const game = createGame(context, 3, 3);
          |                  ^
      199 |     game.grid.splice(0, 0, ...grid);
      200 |
      201 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:198:18)

  ● Game Of Life: › a dead cell with three living neighbors should come alive and have its lifeTime reset to one

    TypeError: createGame is not a function

      219 |     };
      220 |
    > 221 |     const game = createGame(context, 3, 3);
          |                  ^
      222 |     game.grid.splice(0, 0, ...grid);
      223 |
      224 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:221:18)

  ● Game Of Life: › a dead cell with four living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      243 |     };
      244 |
    > 245 |     const game = createGame(context, 3, 3);
          |                  ^
      246 |     game.grid.splice(0, 0, ...grid);
      247 |
      248 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:245:18)

Test Suites: 1 failed, 1 total
Tests:       11 failed, 11 total
Snapshots:   0 total
Time:        0.769 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 08:21:00 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  135:7  error  Parsing error: Unexpected token )

✖ 1 problem (1 error, 0 warnings)


2024-08-10 08:21:45 info: ------------------------------------------
2024-08-10 08:21:45 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 08:21:45 info: ------------------------------------------
2024-08-10 08:21:47 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✕ should exist and be executable (4 ms)
    ✕ a living cell with zero living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a living cell with one living neighbor should die and have its life time reset to zero
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with four living neighbors should die and have its life time reset to zero
    ✕ a dead cell with zero living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✕ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with three living neighbors should come alive and have its lifeTime reset to one (1 ms)
    ✕ a dead cell with four living neighbors should remain dead and have a life time of zero (1 ms)

  ● Game Of Life: › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      29 |
      30 |   test('should exist and be executable', () => {
    > 31 |     expect(exported).toBeDefined();
         |                      ^
      32 |   });
      33 |
      34 |   test('a living cell with zero living neighbors should die and have its life time reset to zero', () => {

      at Object.toBeDefined (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:31:22)

  ● Game Of Life: › a living cell with zero living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      43 |     };
      44 |
    > 45 |     const game = createGame(context, 3, 3);
         |                  ^
      46 |     game.grid.splice(0, 0, ...grid);
      47 |
      48 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:45:18)

  ● Game Of Life: › a living cell with one living neighbor should die and have its life time reset to zero

    TypeError: createGame is not a function

      64 |     };
      65 |
    > 66 |     const game = createGame(context, 3, 3);
         |                  ^
      67 |     game.grid.splice(0, 0, ...grid);
      68 |
      69 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:66:18)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      86 |     };
      87 |
    > 88 |     const game = createGame(context, 3, 3);
         |                  ^
      89 |     game.grid.splice(0, 0, ...grid);
      90 |
      91 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:88:18)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      109 |     };
      110 |
    > 111 |     const game = createGame(context, 3, 3);
          |                  ^
      112 |     game.grid.splice(0, 0, ...grid);
      113 |
      114 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:111:18)

  ● Game Of Life: › a living cell with four living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      133 |     };
      134 |
    > 135 |     const game = createGame(context, 3, 3);
          |                  ^
      136 |     game.grid.splice(0, 0, ...grid);
      137 |
      138 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:135:18)

  ● Game Of Life: › a dead cell with zero living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      153 |     };
      154 |
    > 155 |     const game = createGame(context, 3, 3);
          |                  ^
      156 |     game.grid.splice(0, 0, ...grid);
      157 |
      158 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:155:18)

  ● Game Of Life: › a dead cell with one living neighbor should remain dead and have a life time of zero

    TypeError: createGame is not a function

      174 |     };
      175 |
    > 176 |     const game = createGame(context, 3, 3);
          |                  ^
      177 |     game.grid.splice(0, 0, ...grid);
      178 |
      179 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:176:18)

  ● Game Of Life: › a dead cell with two living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      196 |     };
      197 |
    > 198 |     const game = createGame(context, 3, 3);
          |                  ^
      199 |     game.grid.splice(0, 0, ...grid);
      200 |
      201 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:198:18)

  ● Game Of Life: › a dead cell with three living neighbors should come alive and have its lifeTime reset to one

    TypeError: createGame is not a function

      219 |     };
      220 |
    > 221 |     const game = createGame(context, 3, 3);
          |                  ^
      222 |     game.grid.splice(0, 0, ...grid);
      223 |
      224 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:221:18)

  ● Game Of Life: › a dead cell with four living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      243 |     };
      244 |
    > 245 |     const game = createGame(context, 3, 3);
          |                  ^
      246 |     game.grid.splice(0, 0, ...grid);
      247 |
      248 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:245:18)

Test Suites: 1 failed, 1 total
Tests:       11 failed, 11 total
Snapshots:   0 total
Time:        0.651 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 08:21:48 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  136:7  error  Parsing error: Unexpected token )

✖ 1 problem (1 error, 0 warnings)


2024-08-10 08:40:02 info: ------------------------------------------
2024-08-10 08:40:02 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 08:40:02 info: ------------------------------------------
2024-08-10 08:40:03 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✓ should exist and be executable (1 ms)
    ✕ a living cell with zero living neighbors should die and have its life time reset to zero (3 ms)
    ✕ a living cell with one living neighbor should die and have its life time reset to zero (1 ms)
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with four living neighbors should die and have its life time reset to zero (1 ms)
    ✓ a dead cell with zero living neighbors should remain dead and have a life time of zero (1 ms)
    ✓ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✓ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with three living neighbors should come alive and have its lifeTime reset to one (1 ms)
    ✓ a dead cell with four living neighbors should remain dead and have a life time of zero (1 ms)

  ● Game Of Life: › a living cell with zero living neighbors should die and have its life time reset to zero

    expect(received).toBe(expected) // Object.is equality

    Expected: 0
    Received: 1

      49 |
      50 |     expect(midCell.alive).toBe(false);
    > 51 |     expect(midCell.lifeTime).toBe(0);
         |                              ^
      52 |   });
      53 |
      54 |   test('a living cell with one living neighbor should die and have its life time reset to zero', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:51:30)

  ● Game Of Life: › a living cell with one living neighbor should die and have its life time reset to zero

    expect(received).toBe(expected) // Object.is equality

    Expected: 0
    Received: 1

      70 |
      71 |     expect(midCell.alive).toBe(false);
    > 72 |     expect(midCell.lifeTime).toBe(0);
         |                              ^
      73 |   });
      74 |
      75 |   test('a living cell with two living neighbors should survive and have its life time incremented by one', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:72:30)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      92 |
      93 |     expect(midCell.alive).toBe(true);
    > 94 |     expect(midCell.lifeTime).toBe(2);
         |                              ^
      95 |   });
      96 |
      97 |   test('a living cell with three living neighbors should survive and have its life time incremented by one', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:94:30)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      115 |
      116 |     expect(midCell.alive).toBe(true);
    > 117 |     expect(midCell.lifeTime).toBe(2);
          |                              ^
      118 |   });
      119 |
      120 |   test('a living cell with four living neighbors should die and have its life time reset to zero', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:117:30)

  ● Game Of Life: › a living cell with four living neighbors should die and have its life time reset to zero

    expect(received).toBe(expected) // Object.is equality

    Expected: 0
    Received: 1

      139 |
      140 |     expect(midCell.alive).toBe(false);
    > 141 |     expect(midCell.lifeTime).toBe(0);
          |                              ^
      142 |   });
      143 |
      144 |   test('a dead cell with zero living neighbors should remain dead and have a life time of zero', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:141:30)

  ● Game Of Life: › a dead cell with three living neighbors should come alive and have its lifeTime reset to one

    expect(received).toBe(expected) // Object.is equality

    Expected: 1
    Received: 0

      225 |
      226 |     expect(midCell.alive).toBe(true);
    > 227 |     expect(midCell.lifeTime).toBe(1);
          |                              ^
      228 |   });
      229 |
      230 |   test('a dead cell with four living neighbors should remain dead and have a life time of zero', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:227:30)

Test Suites: 1 failed, 1 total
Tests:       6 failed, 5 passed, 11 total
Snapshots:   0 total
Time:        0.454 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 08:40:04 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  70:9  error  'opacity' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2024-08-10 09:03:55 info: ------------------------------------------
2024-08-10 09:03:55 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 09:03:55 info: ------------------------------------------
2024-08-10 09:03:57 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✓ should exist and be executable (2 ms)
    ✓ a living cell with zero living neighbors should die and have its life time reset to zero (2 ms)
    ✓ a living cell with one living neighbor should die and have its life time reset to zero (1 ms)
    ✓ a living cell with two living neighbors should survive and have its life time incremented by one
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one (2 ms)
    ✓ a living cell with four living neighbors should die and have its life time reset to zero
    ✓ a dead cell with zero living neighbors should remain dead and have a life time of zero
    ✓ a dead cell with one living neighbor should remain dead and have a life time of zero (1 ms)
    ✓ a dead cell with two living neighbors should remain dead and have a life time of zero (1 ms)
    ✓ a dead cell with three living neighbors should come alive and have its lifeTime reset to one (1 ms)
    ✓ a dead cell with four living neighbors should remain dead and have a life time of zero

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      115 |
      116 |     expect(midCell.alive).toBe(true);
    > 117 |     expect(midCell.lifeTime).toBe(2);
          |                              ^
      118 |   });
      119 |
      120 |   test('a living cell with four living neighbors should die and have its life time reset to zero', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:117:30)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 10 passed, 11 total
Snapshots:   0 total
Time:        0.49 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 09:03:58 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  70:9  error  'opacity' is assigned a value but never used  no-unused-vars

✖ 1 problem (1 error, 0 warnings)


2024-08-10 09:53:25 info: ------------------------------------------
2024-08-10 09:53:25 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 09:53:25 info: ------------------------------------------
2024-08-10 09:53:27 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✓ should exist and be executable (2 ms)
    ✓ a living cell with zero living neighbors should die and have its life time reset to zero (1 ms)
    ✓ a living cell with one living neighbor should die and have its life time reset to zero (1 ms)
    ✓ a living cell with two living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one (2 ms)
    ✓ a living cell with four living neighbors should die and have its life time reset to zero
    ✓ a dead cell with zero living neighbors should remain dead and have a life time of zero
    ✓ a dead cell with one living neighbor should remain dead and have a life time of zero (1 ms)
    ✓ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✓ a dead cell with three living neighbors should come alive and have its lifeTime reset to one
    ✓ a dead cell with four living neighbors should remain dead and have a life time of zero (1 ms)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      115 |
      116 |     expect(midCell.alive).toBe(true);
    > 117 |     expect(midCell.lifeTime).toBe(2);
          |                              ^
      118 |   });
      119 |
      120 |   test('a living cell with four living neighbors should die and have its life time reset to zero', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:117:30)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 10 passed, 11 total
Snapshots:   0 total
Time:        0.63 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 10:17:49 info: ------------------------------------------
2024-08-10 10:17:49 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 10:17:49 info: ------------------------------------------
2024-08-10 10:17:51 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✕ should exist and be executable (3 ms)
    ✕ a living cell with zero living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a living cell with one living neighbor should die and have its life time reset to zero
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one (1 ms)
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one
    ✕ a living cell with four living neighbors should die and have its life time reset to zero
    ✕ a dead cell with zero living neighbors should remain dead and have a life time of zero (1 ms)
    ✕ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✕ a dead cell with two living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with three living neighbors should come alive and have its lifeTime reset to one (1 ms)
    ✕ a dead cell with four living neighbors should remain dead and have a life time of zero

  ● Game Of Life: › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      29 |
      30 |   test('should exist and be executable', () => {
    > 31 |     expect(exported).toBeDefined();
         |                      ^
      32 |   });
      33 |
      34 |   test('a living cell with zero living neighbors should die and have its life time reset to zero', () => {

      at Object.toBeDefined (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:31:22)

  ● Game Of Life: › a living cell with zero living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      43 |     };
      44 |
    > 45 |     const game = createGame(context, 3, 3);
         |                  ^
      46 |     game.grid.splice(0, 0, ...grid);
      47 |
      48 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:45:18)

  ● Game Of Life: › a living cell with one living neighbor should die and have its life time reset to zero

    TypeError: createGame is not a function

      64 |     };
      65 |
    > 66 |     const game = createGame(context, 3, 3);
         |                  ^
      67 |     game.grid.splice(0, 0, ...grid);
      68 |
      69 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:66:18)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      86 |     };
      87 |
    > 88 |     const game = createGame(context, 3, 3);
         |                  ^
      89 |     game.grid.splice(0, 0, ...grid);
      90 |
      91 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:88:18)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      109 |     };
      110 |
    > 111 |     const game = createGame(context, 3, 3);
          |                  ^
      112 |     game.grid.splice(0, 0, ...grid);
      113 |
      114 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:111:18)

  ● Game Of Life: › a living cell with four living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      133 |     };
      134 |
    > 135 |     const game = createGame(context, 3, 3);
          |                  ^
      136 |     game.grid.splice(0, 0, ...grid);
      137 |
      138 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:135:18)

  ● Game Of Life: › a dead cell with zero living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      153 |     };
      154 |
    > 155 |     const game = createGame(context, 3, 3);
          |                  ^
      156 |     game.grid.splice(0, 0, ...grid);
      157 |
      158 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:155:18)

  ● Game Of Life: › a dead cell with one living neighbor should remain dead and have a life time of zero

    TypeError: createGame is not a function

      174 |     };
      175 |
    > 176 |     const game = createGame(context, 3, 3);
          |                  ^
      177 |     game.grid.splice(0, 0, ...grid);
      178 |
      179 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:176:18)

  ● Game Of Life: › a dead cell with two living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      196 |     };
      197 |
    > 198 |     const game = createGame(context, 3, 3);
          |                  ^
      199 |     game.grid.splice(0, 0, ...grid);
      200 |
      201 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:198:18)

  ● Game Of Life: › a dead cell with three living neighbors should come alive and have its lifeTime reset to one

    TypeError: createGame is not a function

      219 |     };
      220 |
    > 221 |     const game = createGame(context, 3, 3);
          |                  ^
      222 |     game.grid.splice(0, 0, ...grid);
      223 |
      224 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:221:18)

  ● Game Of Life: › a dead cell with four living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      243 |     };
      244 |
    > 245 |     const game = createGame(context, 3, 3);
          |                  ^
      246 |     game.grid.splice(0, 0, ...grid);
      247 |
      248 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:245:18)

Test Suites: 1 failed, 1 total
Tests:       11 failed, 11 total
Snapshots:   0 total
Time:        0.725 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 10:17:52 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  123:27  error  Parsing error: Unexpected token ;

✖ 1 problem (1 error, 0 warnings)


2024-08-10 10:19:10 info: ------------------------------------------
2024-08-10 10:19:10 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 10:19:10 info: ------------------------------------------
2024-08-10 10:19:11 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✕ should exist and be executable (2 ms)
    ✕ a living cell with zero living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a living cell with one living neighbor should die and have its life time reset to zero
    ✕ a living cell with two living neighbors should survive and have its life time incremented by one
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one
    ✕ a living cell with four living neighbors should die and have its life time reset to zero (1 ms)
    ✕ a dead cell with zero living neighbors should remain dead and have a life time of zero
    ✕ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✕ a dead cell with two living neighbors should remain dead and have a life time of zero (1 ms)
    ✕ a dead cell with three living neighbors should come alive and have its lifeTime reset to one (1 ms)
    ✕ a dead cell with four living neighbors should remain dead and have a life time of zero

  ● Game Of Life: › should exist and be executable

    expect(received).toBeDefined()

    Received: undefined

      29 |
      30 |   test('should exist and be executable', () => {
    > 31 |     expect(exported).toBeDefined();
         |                      ^
      32 |   });
      33 |
      34 |   test('a living cell with zero living neighbors should die and have its life time reset to zero', () => {

      at Object.toBeDefined (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:31:22)

  ● Game Of Life: › a living cell with zero living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      43 |     };
      44 |
    > 45 |     const game = createGame(context, 3, 3);
         |                  ^
      46 |     game.grid.splice(0, 0, ...grid);
      47 |
      48 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:45:18)

  ● Game Of Life: › a living cell with one living neighbor should die and have its life time reset to zero

    TypeError: createGame is not a function

      64 |     };
      65 |
    > 66 |     const game = createGame(context, 3, 3);
         |                  ^
      67 |     game.grid.splice(0, 0, ...grid);
      68 |
      69 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:66:18)

  ● Game Of Life: › a living cell with two living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      86 |     };
      87 |
    > 88 |     const game = createGame(context, 3, 3);
         |                  ^
      89 |     game.grid.splice(0, 0, ...grid);
      90 |
      91 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:88:18)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    TypeError: createGame is not a function

      109 |     };
      110 |
    > 111 |     const game = createGame(context, 3, 3);
          |                  ^
      112 |     game.grid.splice(0, 0, ...grid);
      113 |
      114 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:111:18)

  ● Game Of Life: › a living cell with four living neighbors should die and have its life time reset to zero

    TypeError: createGame is not a function

      133 |     };
      134 |
    > 135 |     const game = createGame(context, 3, 3);
          |                  ^
      136 |     game.grid.splice(0, 0, ...grid);
      137 |
      138 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:135:18)

  ● Game Of Life: › a dead cell with zero living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      153 |     };
      154 |
    > 155 |     const game = createGame(context, 3, 3);
          |                  ^
      156 |     game.grid.splice(0, 0, ...grid);
      157 |
      158 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:155:18)

  ● Game Of Life: › a dead cell with one living neighbor should remain dead and have a life time of zero

    TypeError: createGame is not a function

      174 |     };
      175 |
    > 176 |     const game = createGame(context, 3, 3);
          |                  ^
      177 |     game.grid.splice(0, 0, ...grid);
      178 |
      179 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:176:18)

  ● Game Of Life: › a dead cell with two living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      196 |     };
      197 |
    > 198 |     const game = createGame(context, 3, 3);
          |                  ^
      199 |     game.grid.splice(0, 0, ...grid);
      200 |
      201 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:198:18)

  ● Game Of Life: › a dead cell with three living neighbors should come alive and have its lifeTime reset to one

    TypeError: createGame is not a function

      219 |     };
      220 |
    > 221 |     const game = createGame(context, 3, 3);
          |                  ^
      222 |     game.grid.splice(0, 0, ...grid);
      223 |
      224 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:221:18)

  ● Game Of Life: › a dead cell with four living neighbors should remain dead and have a life time of zero

    TypeError: createGame is not a function

      243 |     };
      244 |
    > 245 |     const game = createGame(context, 3, 3);
          |                  ^
      246 |     game.grid.splice(0, 0, ...grid);
      247 |
      248 |     game.updateGrid();

      at Object.createGame (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:245:18)

Test Suites: 1 failed, 1 total
Tests:       11 failed, 11 total
Snapshots:   0 total
Time:        0.41 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
2024-08-10 10:19:12 error: *** ESLint Report ***

ex6-gameOfLife/index.js
  126:9  error  Parsing error: Unexpected token else

✖ 1 problem (1 error, 0 warnings)


2024-08-10 10:20:11 info: ------------------------------------------
2024-08-10 10:20:11 info: >>> Running Unit Test `ex6-gameOfLife` <<<
2024-08-10 10:20:11 info: ------------------------------------------
2024-08-10 10:20:13 error: *** Unit Test Error Report ***

Command failed: npx jest ex6-gameOfLife.test.js --colors
 FAIL  2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js
  Game Of Life:
    ✓ should exist and be executable (2 ms)
    ✓ a living cell with zero living neighbors should die and have its life time reset to zero (2 ms)
    ✓ a living cell with one living neighbor should die and have its life time reset to zero (1 ms)
    ✓ a living cell with two living neighbors should survive and have its life time incremented by one
    ✕ a living cell with three living neighbors should survive and have its life time incremented by one (2 ms)
    ✓ a living cell with four living neighbors should die and have its life time reset to zero (1 ms)
    ✓ a dead cell with zero living neighbors should remain dead and have a life time of zero
    ✓ a dead cell with one living neighbor should remain dead and have a life time of zero
    ✓ a dead cell with two living neighbors should remain dead and have a life time of zero (1 ms)
    ✓ a dead cell with three living neighbors should come alive and have its lifeTime reset to one
    ✓ a dead cell with four living neighbors should remain dead and have a life time of zero (1 ms)

  ● Game Of Life: › a living cell with three living neighbors should survive and have its life time incremented by one

    expect(received).toBe(expected) // Object.is equality

    Expected: 2
    Received: 1

      115 |
      116 |     expect(midCell.alive).toBe(true);
    > 117 |     expect(midCell.lifeTime).toBe(2);
          |                              ^
      118 |   });
      119 |
      120 |   test('a living cell with four living neighbors should die and have its life time reset to zero', () => {

      at Object.toBe (2-Browsers/Week1/unit-tests/ex6-gameOfLife.test.js:117:30)

Test Suites: 1 failed, 1 total
Tests:       1 failed, 10 passed, 11 total
Snapshots:   0 total
Time:        0.454 s, estimated 1 s
Ran all test suites matching /ex6-gameOfLife.test.js/i.
